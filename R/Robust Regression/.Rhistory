Y <- data0[,1]
X <- as.matrix(cbind(rep(1,n),data0[,-1]))
for (m in 1:1000) {
r1 <- (Y - X%*%beta[[m]])^2
u[[m]] <- r1/phi[m]
v[[m]] <- (v0+1)/(v0+u[[m]])
D[[m]] <- diag(as.numeric(v[[m]]))
beta[[m+1]] <- solve(t(X)%*%D[[m]]%*%X)%*%t(X)%*%D[[m]]%*%Y
phi[m+1] <- t(r1)%*%v[[m]]/n
if (dist(t(cbind(beta[[m+1]],beta[[m]]))) < 1e-4 && abs(phi[m+1]-phi[m] < 1e-4)){
beta_final <- beta[[m+1]]
phi_final <- phi[m+1]
m_final <- m
break}
}
result_final <- list("beta"=beta_final,"phi"=phi_final)
return(result_final)
}
data_c <- data.frame(Y_c,X_c)
result_c <- lm(Y_c~., data = data_c)
coefficients.C <- as.numeric(result_c$coefficients)
# data_c <- data.frame(Y_c,X_c)
# result_c <- Fisher(data_c)
# coefficients.C <- result_c$beta[1:(p+1)]
data_r <- data.frame(Y_2r,X_2r)
result_r <- lm(Y_2r~., data = data_r)
coefficients.R <- as.numeric(result_r$coefficients)
# data_r <- data.frame("Y_c"=Y_2r,X_2r)
# result_r <- Fisher(data_r)
# coefficients.R <- result_r$beta[1:(p+1)]
result <- list("coefficients.C"=coefficients.C,"coefficients.R"=coefficients.R)
return(result)
}
iteration=100 ## number of repeated Monte Carlo simulations
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean1 <-accuracy_mean
rownames(accuracy_mean1) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd1 <- accuracy_sd
##############################################################
n=300   ## 30,90,300,900
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean2 <-accuracy_mean
rownames(accuracy_mean2) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd2 <- accuracy_sd
#######################################################
n=900   ## 30,90,300,900
iETKRR_pre <- iETKRR11_pre
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean3 <-accuracy_mean
rownames(accuracy_mean3) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd3 <- accuracy_sd
result.accuracy <- cbind(rbind(accuracy_mean1,accuracy_mean2,accuracy_mean3),
rbind(accuracy_sd1,accuracy_sd2,accuracy_sd3))
write.csv(result.accuracy,file = "D:/青青青青/实验室/复杂数据/区间数据/20220322/修改/newresult/simu结果/II1-p3.csv",
row.names = TRUE)
################################
#################################
#####################################  II-2
n=90  # n=90,300,900
out.p=0  #out.p=0.05,0.1,0.15
err=40  #err=20,40
out.index=1  # out.index=1,2
iETKRR_pre <- iETKRR14_pre
iteration=100 ## number of repeated Monte Carlo simulations
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean1 <-accuracy_mean
rownames(accuracy_mean1) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd1 <- accuracy_sd
##############################################################
n=300   ## 30,90,300,900
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean2 <-accuracy_mean
rownames(accuracy_mean2) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd2 <- accuracy_sd
#######################################################
n=900   ## 30,90,300,900
iETKRR_pre <- iETKRR11_pre
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean3 <-accuracy_mean
rownames(accuracy_mean3) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd3 <- accuracy_sd
result.accuracy <- cbind(rbind(accuracy_mean1,accuracy_mean2,accuracy_mean3),
rbind(accuracy_sd1,accuracy_sd2,accuracy_sd3))
write.csv(result.accuracy,file = "D:/青青青青/实验室/复杂数据/区间数据/20220322/修改/newresult/simu结果/II2-p3.csv",
row.names = TRUE)
################################
#################################
#####################################  II3
n=300  # n=90,300,900
out.p=0.05  #out.p=0.05,0.1,0.15
err=20  #err=20,40
out.index=1  # out.index=1,2
iteration=100 ## number of repeated Monte Carlo simulations
accuracy <- list()
iETKRR_pre <- iETKRR34_pre
SSLR <- function(data){
X_lower <- as.matrix(data[[1]])
X_upper <- as.matrix(data[[2]])
Y_lower <- data[[3]]
Y_upper <- data[[4]]
n <- nrow(X_lower)
p <- ncol(X_lower)
X_c <- (X_lower + X_upper)/2
X_2r <- (X_upper - X_lower)
Y_c <- (Y_lower + Y_upper)/2
Y_2r <- (Y_upper - Y_lower)
Fisher <- function(data0){
beta <- list()
phi <- NULL
n <- nrow(data0)
result_SSLR <- lm(Y_c~., data = data0)
beta[[1]] <- as.matrix(result_SSLR$coefficients,nrow=2)
phi[1] <- sum(result_SSLR$residuals^2)/n
u <- list()
v <- list()
D <- list()
v0=2
Y <- data0[,1]
X <- as.matrix(cbind(rep(1,n),data0[,-1]))
for (m in 1:1000) {
r1 <- (Y - X%*%beta[[m]])^2
u[[m]] <- r1/phi[m]
v[[m]] <- (v0+1)/(v0+u[[m]])
D[[m]] <- diag(as.numeric(v[[m]]))
beta[[m+1]] <- solve(t(X)%*%D[[m]]%*%X)%*%t(X)%*%D[[m]]%*%Y
phi[m+1] <- t(r1)%*%v[[m]]/n
if (dist(t(cbind(beta[[m+1]],beta[[m]]))) < 1e-4 && abs(phi[m+1]-phi[m] < 1e-4)){
beta_final <- beta[[m+1]]
phi_final <- phi[m+1]
m_final <- m
break}
}
result_final <- list("beta"=beta_final,"phi"=phi_final)
return(result_final)
}
# data_c <- data.frame(Y_c,X_c)
# result_c <- lm(Y_c~., data = data_c)
# coefficients.C <- as.numeric(result_c$coefficients)
data_c <- data.frame(Y_c,X_c)
result_c <- Fisher(data_c)
coefficients.C <- result_c$beta[1:(p+1)]
data_r <- data.frame(Y_2r,X_2r)
result_r <- lm(Y_2r~., data = data_r)
coefficients.R <- as.numeric(result_r$coefficients)
# data_r <- data.frame("Y_c"=Y_2r,X_2r)
# result_r <- Fisher(data_r)
# coefficients.R <- result_r$beta[1:(p+1)]
result <- list("coefficients.C"=coefficients.C,"coefficients.R"=coefficients.R)
return(result)
}
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean1 <-accuracy_mean
rownames(accuracy_mean1) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd1 <- accuracy_sd
######################################################
out.p=0.1   ## 30,90,300,900
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean2 <-accuracy_mean
rownames(accuracy_mean2) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd2 <- accuracy_sd
######################################################
out.p=0.15   ## 30,90,300,900
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean3 <-accuracy_mean
rownames(accuracy_mean3) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd3 <- accuracy_sd
result.accuracy <- cbind(rbind(accuracy_mean1,accuracy_mean2,accuracy_mean3),
rbind(accuracy_sd1,accuracy_sd2,accuracy_sd3))
write.csv(result.accuracy,file = "D:/青青青青/实验室/复杂数据/区间数据/20220322/修改/newresult/simu结果/II3-p3.csv",
row.names = TRUE)
################################
#################################
#####################################  II4
n=300  # n=90,300,900
out.p=0.05  #out.p=0.05,0.1,0.15
err=20  #err=20,40
out.index=2  # out.index=1,2
iteration=100 ## number of repeated Monte Carlo simulations
accuracy <- list()
iETKRR_pre <- iETKRR13_pre
SSLR <- function(data){
X_lower <- as.matrix(data[[1]])
X_upper <- as.matrix(data[[2]])
Y_lower <- data[[3]]
Y_upper <- data[[4]]
n <- nrow(X_lower)
p <- ncol(X_lower)
X_c <- (X_lower + X_upper)/2
X_2r <- (X_upper - X_lower)
Y_c <- (Y_lower + Y_upper)/2
Y_2r <- (Y_upper - Y_lower)
Fisher <- function(data0){
beta <- list()
phi <- NULL
n <- nrow(data0)
result_SSLR <- lm(Y_c~., data = data0)
beta[[1]] <- as.matrix(result_SSLR$coefficients,nrow=2)
phi[1] <- sum(result_SSLR$residuals^2)/n
u <- list()
v <- list()
D <- list()
v0=2
Y <- data0[,1]
X <- as.matrix(cbind(rep(1,n),data0[,-1]))
for (m in 1:1000) {
r1 <- (Y - X%*%beta[[m]])^2
u[[m]] <- r1/phi[m]
v[[m]] <- (v0+1)/(v0+u[[m]])
D[[m]] <- diag(as.numeric(v[[m]]))
beta[[m+1]] <- solve(t(X)%*%D[[m]]%*%X)%*%t(X)%*%D[[m]]%*%Y
phi[m+1] <- t(r1)%*%v[[m]]/n
if (dist(t(cbind(beta[[m+1]],beta[[m]]))) < 1e-4 && abs(phi[m+1]-phi[m] < 1e-4)){
beta_final <- beta[[m+1]]
phi_final <- phi[m+1]
m_final <- m
break}
}
result_final <- list("beta"=beta_final,"phi"=phi_final)
return(result_final)
}
data_c <- data.frame(Y_c,X_c)
result_c <- lm(Y_c~., data = data_c)
coefficients.C <- as.numeric(result_c$coefficients)
# data_c <- data.frame(Y_c,X_c)
# result_c <- Fisher(data_c)
# coefficients.C <- result_c$beta[1:(p+1)]
# data_r <- data.frame(Y_2r,X_2r)
# result_r <- lm(Y_2r~., data = data_r)
# coefficients.R <- as.numeric(result_r$coefficients)
data_r <- data.frame("Y_c"=Y_2r,X_2r)
result_r <- Fisher(data_r)
coefficients.R <- result_r$beta[1:(p+1)]
result <- list("coefficients.C"=coefficients.C,"coefficients.R"=coefficients.R)
return(result)
}
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean1 <-accuracy_mean
rownames(accuracy_mean1) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd1 <- accuracy_sd
######################################################
out.p=0.1   ## 30,90,300,900
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean2 <-accuracy_mean
rownames(accuracy_mean2) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd2 <- accuracy_sd
######################################################
out.p=0.15   ## 30,90,300,900
iETKRR_pre <- iETKRR12_pre
accuracy <- list()
for (l in 1:iteration) {
dataset <- data_generate_II(n,p,out.p,err,out.index)
accuracy[[l]] <- method_compare(dataset)
}
mes <- NULL
accuracy_mean <- matrix(0,10,8)
accuracy_sd <- matrix(0,10,8)
for (i in 1:10) {
for (j in 1:8) {
for (l in 1:iteration) {
mes[l] <- accuracy[[l]][i,j]
}
accuracy_mean[i,j] <- mean(mes)
accuracy_sd[i,j] <- sd(mes)
}
}
accuracy_mean3 <-accuracy_mean
rownames(accuracy_mean3) <- c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR")
accuracy_sd3 <- accuracy_sd
result.accuracy <- cbind(rbind(accuracy_mean1,accuracy_mean2,accuracy_mean3),
rbind(accuracy_sd1,accuracy_sd2,accuracy_sd3))
write.csv(result.accuracy,file = "D:/青青青青/实验室/复杂数据/区间数据/20220322/修改/newresult/simu结果/II4-p3.csv",
row.names = TRUE)
data1<-read.csv("D:/青青青青/实验室/复杂数据/区间数据/20210419/结果表格/simu结果/II3-1-p1.csv")
data1<-read.csv("D:/青青青青/实验室/复杂数据/区间数据/20210419/结果表格/simu结果/p6/I5.csv")
data1 <- data1[,-1]
data1 <- round(data1,4)
data1 <- as.matrix(data1)
value <- as.vector(data1)
method <- rep(rep(c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR"),rep(100,10)),4)
error <- rep(c("RMSE_L","RMSE_U","RMSE_H","AR"),rep(1000,4))
data<- data.frame(error,method,value)
data$method <- factor(data$method,level = c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR"))
#########################################
ggplot(data,aes(x = method, y = value, fill = method)) +
geom_boxplot(alpha=0.8,width=0.9) +
scale_y_continuous(name = NULL)+
scale_x_discrete(name = NULL,labels = NULL) +
theme_bw() +
theme(text = element_text(size = 12),
axis.text.x=element_text(size = 11))+
facet_wrap(~factor(error,level = c("RMSE_L","RMSE_U","RMSE_H","AR")),scales= "free")
##############################################
###############################################sample size
library(plyr)
library(gridExtra)
library(RColorBrewer)
data1<-read.csv("D:/青青青青/实验室/复杂数据/区间数据/20210419/结果表格/simu结果/II2-p1.csv")
data1 <- data1[,-1]
data1 <- round(data1,4)
method <-rep(c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR"),12)
size <- rep(rep(c("n=90","n=300","n=900"),rep(10,3)),4)
error <- rep(c("RMSE_L","RMSE_U","RMSE_H","AR"),rep(30,4))
mean <- as.vector(as.matrix(data1[,1:4]))
sd <- as.vector(as.matrix(data1[,5:8]))
data<- data.frame(size,method,error,mean,sd)
data$size <- factor(data$size,level = c("n=90","n=300","n=900"),
labels = c(expression(n==90),expression(n==300),expression(n==900)))
data$method <- factor(data$method,level = c("CRM","CCRM","CCRJM","ID","SSLR","IRR","IQR","iETKRR","Fuzzy-RR","LN-IRR"))
data$error <- factor(data$error,level = c("RMSE_L","RMSE_U","RMSE_H","AR"))
data$error <- factor(data$error,labels =
c(expression(RMSE[L]),expression(RMSE[U]),expression(RMSE[H]),expression(AR)))
addline=data.frame(error=rep(c("RMSE_L","RMSE_U","RMSE_H","AR"),rep(3,4)),
size=rep(c("n=90","n=300","n=900"),4),
linevalue= mean[seq(10,120,by=10)])
addline$size <- factor(addline$size,level = c("n=90","n=300","n=900"),
labels = c(expression(n==90),expression(n==300),expression(n==900)))
addline$error <- factor(addline$error,level = c("RMSE_L","RMSE_U","RMSE_H","AR"),
labels = c(expression(RMSE[L]),expression(RMSE[U]),expression(RMSE[H]),expression(AR)))
mycol= brewer.pal(n = 10, name = "Set3")
#b2p1 <- colorRampPalette(c("#80B1D3","white", "red"))
#mycol= b2p1(10)
win.graph()
ggplot(data,aes(x=size,y=mean,fill=method))+
geom_bar(alpha=0.6,stat="identity",position=position_dodge(1), color="black",width=0.5) +
scale_fill_manual(values = mycol) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean +sd),position=position_dodge(1), width=0.5,lwd=0.75)+
theme_bw()+
geom_hline(aes(yintercept = linevalue), addline)+
#facet_wrap(~size,nrow=1,scales = "free_x")+
facet_grid(error~size,labeller = label_parsed,scales = "free")+
scale_x_discrete(name = NULL,labels=NULL)+
scale_y_continuous(name = NULL)+
theme(legend.position = "bottom",
legend.text = element_text(size = 10),
text = element_text(size = 16),
axis.text.y=element_text(size = 12),
panel.spacing = unit(1, "lines"))+
guides(fill = guide_legend(title = NULL,nrow = 2,byrow = T))
