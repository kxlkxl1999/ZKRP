install.packages("quantreg")
install.packages("quantreg")
install.packages("quantreg")
.libPaths()
plot(x,y,type="n",main="Cross Plot",xlab="X",ylab="Y",
cex.lab=3, cex.axis=2.5, cex.main=3, cex.sub=3)
#########
library(plotrix)
library(MASS)
#########Data
## Blood Pressure Data ##
### blood pressure data
pulsel=c(44,60,56,70,54,70,72,76,86,86,63)
pulseu=c(68,72,90,112,72,100,100,98,96,100,75)
systolicl=c(90,90,140,110,90,130,130,110,138,110,60)
systolicu=c(100,130,180,142,100,160,160,190,180,150,100)
diastolicl=c(50,70,90,80,50,80,76,70,90,78,140)
diastolicu=c(70,90,100,108,70,110,90,110,110,100,150)
xl=systolicl
xu=systolicu
yl=pulsel
yu=pulseu
x=cbind(xl,xu)
y=cbind(yl,yu)
xc=(xl+xu)/2
xr=(xu-xl)
yc=(yl+yu)/2
yr=(yu-yl)
### Simulation
n=50
meanxc <- 3
meanyc <- 2
meanxr <- 5
meanyr <- 4.5
Cor_Xc_Xr <- 0
Cor_Yc_Yr <- 0
Cor_Xc_Yc <- 1
Cor_Xr_Yr <- 0
Cor_Xc_Yr <- 0
Cor_Xr_Yc <- 0
sig_Xc <- 3
sig_Yc <- 3
sig_Xr <- 2
sig_Yr <- 1.5
sig_vec <- c(sig_Xc, sig_Xr, sig_Yc, sig_Yr)
Cor_mat <- diag(4)
Cor_mat[1,2] <- Cor_mat[2,1] <- Cor_Xc_Xr
Cor_mat[1,3] <- Cor_mat[3,1] <- Cor_Xc_Yc
Cor_mat[1,4] <- Cor_mat[4,1] <- Cor_Xc_Yr
Cor_mat[2,3] <- Cor_mat[3,2] <- Cor_Xr_Yc
Cor_mat[2,4] <- Cor_mat[4,2] <- Cor_Xr_Yr
Cor_mat[3,4] <- Cor_mat[4,3] <- Cor_Yc_Yr
Sigma_mat <- sig_vec * t(Cor_mat * sig_vec)
muvec <- c(meanxc,meanxr,meanyc,meanyr)
data_vec <- mvrnorm(n = n, mu = muvec, Sigma = Sigma_mat)
xcsave <- data_vec[,1]
ycsave <- data_vec[,3]
xr <- data_vec[,2]
yr <- data_vec[,4]
xc <- xcsave
yc <- ycsave
#eg
#xc<-rnorm(n,0,3)
#xr<-xc^2
#yc<-rnorm(n,0,3)
#yr<-rnorm(n,3,1)
#eg
#xc<-rnorm(n,0,3)
#xr<-rnorm(n,3,1)
#yc<-rnorm(n,0,3)
#yr<-yc+7
xl <- xc-xr/2
xu <- xc+xr/2
yu <- yc+yr/2
yl <- yc-yr/2
### outlier
xcsave <- data_vec[,1]
ycsave <- data_vec[,3]
xrsave <- data_vec[,2]
yrsave <- data_vec[,4]
### scenario where there is abnormality in rho_rr
xc<-c(xcsave,3)
xr<-c(xrsave,8)
yc<-c(ycsave,1)
yr<-c(yrsave,0.5)
### scenario where there is extreme value in xr
xr <- c(xrsave,15)
yr <- c(yrsave,rnorm(1,meanyr,sig_Yr))
xc <- c(xcsave,rnorm(1,meanxc,sig_Xc))
yc <- c(ycsave,rnorm(1,meanyc,sig_Yc))
xl <- xc-xr/2
xu <- xc+xr/2
yu <- yc+yr/2
yl <- yc-yr/2
### scenario where the proposed methods can see more than six pairwise scatter plots
xc<-rnorm(n,5,2)
xr<-rnorm(n,5,2)
yr<-rnorm(n,5,2)
yc<-NULL
for (i in 1:n){
if (xr[i]>yr[i])
{yc[i]<-xc[i]+rnorm(1,0,0.5)} else
{yc[i]<-rnorm(1,5,2)}
}
xl <- xc-xr/2
xu <- xc+xr/2
yu <- yc+yr/2
yl <- yc-yr/2
### Standardize the data
xc1 <- (xc - mean(xc))/sd(xc)
yc1 <- (yc - mean(yc))/sd(yc)
xr1 <- (xr - mean(xr))/sd(xr)
yr1 <- (yr - mean(yr))/sd(yr)
### Move y to the original point (0,0)
xcstar <- xc1 - yc1
xrstar <- xr1 - yr1
ycstar <- yc1 - yc1
yrstar <- yr1 - yr1
### Move x to the original point (0,0)
#xcstar <- xc1 - xc1
#xrstar <- xr1 - xr1
#ycstar <- yc1 - xc1
#yrstar <- yr1 - xr1
########## Rectangle Plot ##########
plot.rect<-function(xlow,xhigh,ylow,yhigh){
x=seq(min(xlow),max(xhigh),length=300)
y=seq(min(ylow),max(yhigh),length=300)
par(mar=c(5,6,4,1))
plot(x,y,type="n",main="Rectangle Plot",xlab="X",ylab="Y",
cex.lab=3, cex.axis=2.5, cex.main=3, cex.sub=3)
grid()
segments(x0=xlow,y0=ylow,x1=xhigh,y1=ylow,col=c(rep("black",(length(xlow)))))
segments(x0=xlow,y0=yhigh,x1=xhigh,y1=yhigh,col=c(rep("black",(length(xlow)))))
segments(x0=xlow,y0=ylow,x1=xlow,y1=yhigh,col=c(rep("black",(length(xlow)))))
segments(x0=xhigh,y0=ylow,x1=xhigh,y1=yhigh,col=c(rep("black",(length(xlow)))))
segments(x0=xlow[51],y0=ylow[51],x1=xhigh[51],y1=ylow[51],lwd=4,col=c(rep("red",(length(xlow)))))
segments(x0=xlow[51],y0=yhigh[51],x1=xhigh[51],y1=yhigh[51],lwd=4,col=c(rep("red",(length(xlow)))))
segments(x0=xlow[51],y0=ylow[51],x1=xlow[51],y1=yhigh[51],lwd=4,col=c(rep("red",(length(xlow)))))
segments(x0=xhigh[51],y0=ylow[51],x1=xhigh[51],y1=yhigh[51],lwd=4,col=c(rep("red",(length(xlow)))))
}
plot.rect(xl,xu,yl,yu)
########## Cross Plot ##########
x=seq(min(xl),max(xu),length=300)
y=seq(min(yl),max(yu),length=300)
par(mar=c(5,6,4,1))
plot(x,y,type="n",main="Cross Plot",xlab="X",ylab="Y",
cex.lab=3, cex.axis=2.5, cex.main=3, cex.sub=3)
grid()
points(xc,yc,pch=16,col=c(rep("black",(length(xl)))))
segments(x0=xl,y0=yc,x1=xu,y1=yc,lwd=1,col=c(rep("black",(length(xl)))))
segments(x0=xc,y0=yl,x1=xc,y1=yu,lwd=1,col=c(rep("black",(length(xl)))))
###########segment plot ############
plot.segs <- data.frame(x1 = xc1, y1=xr1, xend =yc1, yend =yr1,colors="black ")
plot.inter2 <- data.frame(x = c(xc1,yc1), y = c(xr1,yr1),
colors = c(rep("black",length(xc1)),rep("black",length(yc))),
shapes = c(rep(21,length(xc1)),rep(24,length(yc))),
bgs = c(rep("black",length(xc1)),rep("white",length(yc))))
par(mar = c(5,5,5,8))
a=-6
b=6
c=-6
d=6
plot(0,0,col="transparent",xlim=c(a,b),ylim=c(c,d),
main="Interval Distance",xlab="Center",ylab="Range",cex.main=3, cex.lab=3, cex.axis=2.5)
grid()
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(0,1,lty=2)
abline(0,-1,lty=2)
segments(plot.segs$x1,plot.segs$y1,plot.segs$xend,plot.segs$yend,col="black",lwd=2)
points(plot.inter2$x,plot.inter2$y,col=as.character(plot.inter2$colors),
xlab="Center",ylab="Range",pch=plot.inter2$shapes,cex=2,bg=plot.inter2$bgs)
######### dandelion plot without polygons ###########
plot.segs <- data.frame(x1 = xcstar, y1=xrstar, xend =ycstar, yend =yrstar, colors="black")
plot.guide<-data.frame(x1=c(-2/sqrt(pi),-2/sqrt(pi),-2/sqrt(pi),0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0),
xend=c(-2/sqrt(pi),-2/sqrt(pi),0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0,-2/sqrt(pi)),
y1=c(-2/sqrt(pi),0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0,-2/sqrt(pi),-2/sqrt(pi)),
yend=c(0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0,-2/sqrt(pi),-2/sqrt(pi),-2/sqrt(pi)))
plot.true<-data.frame(x1=c(-mean(abs(xcstar+xrstar))*sqrt(2)/2,-mean(abs(xcstar)),-mean(abs(xcstar-xrstar))*sqrt(2)/2,0,mean(abs(xcstar+xrstar))*sqrt(2)/2,mean(abs(xcstar)),mean(abs(xcstar-xrstar))*sqrt(2)/2,0),
xend=c(-mean(abs(xcstar)),-mean(abs(xcstar-xrstar))*sqrt(2)/2,0,mean(abs(xcstar+xrstar))*sqrt(2)/2,mean(abs(xcstar)),mean(abs(xcstar-xrstar))*sqrt(2)/2,0,-mean(abs(xcstar+xrstar))*sqrt(2)/2),
y1=c(-mean(abs(xcstar+xrstar))*sqrt(2)/2,0,mean(abs(xcstar-xrstar))*sqrt(2)/2,mean(abs(xrstar)),mean(abs(xcstar+xrstar))*sqrt(2)/2,0,-mean(abs(xcstar-xrstar))*sqrt(2)/2,-mean(abs(xrstar))),
yend=c(0,mean(abs(xcstar-xrstar))*sqrt(2)/2,mean(abs(xrstar)),mean(abs(xcstar+xrstar))*sqrt(2)/2,0,-mean(abs(xcstar-xrstar))*sqrt(2)/2,-mean(abs(xrstar)),-mean(abs(xcstar+xrstar))*sqrt(2)/2))
plot.inter2 <- data.frame(x = c(xcstar,ycstar), y = c(xrstar,yrstar),
colors = c(rep("black",length(xcstar)),rep("black",length(ycstar))),
shapes = c(rep(21,length(xcstar)),rep(24,length(ycstar))),
bgs = c(rep("black",length(xcstar)),rep("white",length(ycstar))))
par(mar = c(5,5,5,8))
a=-6
b=6
c=-6
d=6
plot(0,0,col="transparent",xlim=c(a,b),ylim=c(c,d),main="Relative Interval Distance",xlab="Center",ylab="Range",
cex.main=3, cex.lab=3, cex.axis=2.5)
grid()
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(0,1,lty=2)
abline(0,-1,lty=2)
segments(plot.segs$x1,plot.segs$y1,plot.segs$xend,plot.segs$yend,col="black",lwd=2)
points(plot.inter2$x,plot.inter2$y,col=as.character(plot.inter2$colors),
xlab="Center",ylab="Range",pch=plot.inter2$shapes,cex=2,bg=plot.inter2$bgs)
######### dandelion plot with guided polygon and expected polygon ###########
plot.segs <- data.frame(x1 = xcstar, y1=xrstar, xend =ycstar, yend =yrstar, colors="black")
plot.guide<-data.frame(x1=c(-2/sqrt(pi),-2/sqrt(pi),-2/sqrt(pi),0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0),
xend=c(-2/sqrt(pi),-2/sqrt(pi),0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0,-2/sqrt(pi)),
y1=c(-2/sqrt(pi),0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0,-2/sqrt(pi),-2/sqrt(pi)),
yend=c(0,2/sqrt(pi),2/sqrt(pi),2/sqrt(pi),0,-2/sqrt(pi),-2/sqrt(pi),-2/sqrt(pi)))
plot.true<-data.frame(x1=c(-mean(abs(xcstar+xrstar))*sqrt(2)/2,-mean(abs(xcstar)),-mean(abs(xcstar-xrstar))*sqrt(2)/2,0,mean(abs(xcstar+xrstar))*sqrt(2)/2,mean(abs(xcstar)),mean(abs(xcstar-xrstar))*sqrt(2)/2,0),
xend=c(-mean(abs(xcstar)),-mean(abs(xcstar-xrstar))*sqrt(2)/2,0,mean(abs(xcstar+xrstar))*sqrt(2)/2,mean(abs(xcstar)),mean(abs(xcstar-xrstar))*sqrt(2)/2,0,-mean(abs(xcstar+xrstar))*sqrt(2)/2),
y1=c(-mean(abs(xcstar+xrstar))*sqrt(2)/2,0,mean(abs(xcstar-xrstar))*sqrt(2)/2,mean(abs(xrstar)),mean(abs(xcstar+xrstar))*sqrt(2)/2,0,-mean(abs(xcstar-xrstar))*sqrt(2)/2,-mean(abs(xrstar))),
yend=c(0,mean(abs(xcstar-xrstar))*sqrt(2)/2,mean(abs(xrstar)),mean(abs(xcstar+xrstar))*sqrt(2)/2,0,-mean(abs(xcstar-xrstar))*sqrt(2)/2,-mean(abs(xrstar)),-mean(abs(xcstar+xrstar))*sqrt(2)/2))
plot.inter2 <- data.frame(x = c(xcstar,ycstar), y = c(xrstar,yrstar),
colors = c(rep("black",length(xc1)),rep("black",length(yc))),
shapes = c(rep(21,length(xc1)),rep(24,length(yc))),
bgs = c(rep("black",length(xc1)),rep("white",length(yc))))
par(mar = c(5,5,5,8))
a=-6
b=6
c=-6
d=6
plot(0,0,col="transparent",xlim=c(a,b),ylim=c(c,d),main="Relative Interval Distance",xlab="Center",ylab="Range",
cex.main=3, cex.lab=3, cex.axis=2.5)
grid()
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(0,1,lty=2)
abline(0,-1,lty=2)
segments(plot.segs$x1,plot.segs$y1,plot.segs$xend,plot.segs$yend,col="black",lwd=2)
points(plot.inter2$x,plot.inter2$y,col=as.character(plot.inter2$colors),
xlab="Center",ylab="Range",pch=plot.inter2$shapes,cex=2,bg=plot.inter2$bgs)
segments(plot.guide$x1,plot.guide$y1,plot.guide$xend,plot.guide$yend,col="black",lwd=2,lty=2)
segments(plot.true$x1,plot.true$y1,plot.true$xend,plot.true$yend,col="red",lwd=2)
seq(min(xl),max(xu),length=300)
hhh = seq(min(xl),max(xu),length=300)
reticulate::repl_python()
